name: Build and Release

# Enhanced workflow for reliable cross-platform builds and releases
# Supports manual triggers, automatic version management, and comprehensive error handling

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0) - leave empty to auto-increment patch'
        required: false
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  # Pre-flight checks
  checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.should_release.outputs.should_release }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "Using manual version: $VERSION"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          npm run version:${{ github.event.inputs.release_type }}
          VERSION=$(node -p "require('./package.json').version")
          echo "Auto-incremented version: $VERSION"
        else
          VERSION=$(node -p "require('./package.json').version")
          echo "Using current version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check if should release
      id: should_release
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  # Build for different platforms
  build:
    name: Build ${{ matrix.os }}
    needs: checks
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin 
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    runs-on: ${{ matrix.os }}

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_DEVELOPER_IDENTITY: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
      CI: true

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm

    - name: Install dependencies
      run: npm ci

    # Set up Apple certificates for code signing (macOS only)
    - name: Import Apple Developer Certificate
      if: matrix.platform == 'darwin' && env.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64
      shell: bash
      run: |
        # Create a temporary directory for the certificate
        mkdir -p $RUNNER_TEMP/certificates
        
        # Decode the base64 certificate and save it to a file
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" | base64 --decode > $RUNNER_TEMP/certificates/certificate.p12
        
        # Import the certificate to the keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security import $RUNNER_TEMP/certificates/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
        # Clean up
        rm -rf $RUNNER_TEMP/certificates

    - name: Update package.json version
      run: |
        VERSION="${{ needs.checks.outputs.version }}"
        npm version $VERSION --no-git-tag-version

    - name: Build the app
      run: npm run make -- --arch=${{ matrix.arch }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: oioio-${{ matrix.platform }}-${{ matrix.arch }}-${{ needs.checks.outputs.version }}
        path: ./out/make/**/*
        retention-days: 30

  # Create release (only when needed)
  release:
    name: Create Release
    needs: [checks, build]
    if: needs.checks.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.checks.outputs.version }}
        name: Release v${{ needs.checks.outputs.version }}
        draft: false
        prerelease: false
        files: ./release-artifacts/**/*
        body: |
          ## Release v${{ needs.checks.outputs.version }}
          
          ### ðŸš€ What's New
          - Cross-platform builds for macOS (Intel & Apple Silicon), Windows, and Linux
          - Enhanced build process with automated quality checks
          - Improved error handling and logging
          
          ### ðŸ“¦ Downloads
          Choose the appropriate download for your platform:
          - **macOS**: Download the `.dmg` file for easy installation
          - **Windows**: Download the `.exe` installer
          - **Linux**: Download the `.deb` (Ubuntu/Debian) or `.rpm` (RedHat/CentOS) package
          
          ### ðŸ”„ Auto-Updates
          This version includes automatic update functionality. The app will check for updates and notify you when new versions are available.