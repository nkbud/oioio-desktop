name: Build and Release

# This workflow automatically builds macOS artifacts (.dmg and .zip) for each push to main
# It automatically increments version numbers and creates releases with the artifacts

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_DEVELOPER_IDENTITY: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
      CI: true

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for auto-incrementing version
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: npm

    - name: Install dependencies
      run: npm ci
    
    # Set up Apple certificates for code signing
    - name: Import Apple Developer Certificate
      if: env.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 && env.APPLE_DEVELOPER_CERTIFICATE_PASSWORD
      run: |
        # Create a temporary directory for the certificate
        mkdir -p $RUNNER_TEMP/certificates
        
        # Decode the base64 certificate and save it to a file
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" | base64 --decode > $RUNNER_TEMP/certificates/certificate.p12
        
        # Import the certificate to the keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security import $RUNNER_TEMP/certificates/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
        # Clean up
        rm -rf $RUNNER_TEMP/certificates
    
    - name: Determine next version
      id: version
      run: |
        # Try to get the last version tag or start at 0.0.0
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Remove 'v' prefix if present
        LAST_TAG=${LAST_TAG#v}
        echo "Last tag: $LAST_TAG"
        
        # Split into components
        IFS='.' read -r -a VERSION_PARTS <<< "$LAST_TAG"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        npm version $NEW_VERSION --no-git-tag-version
    
    - name: Build the app
      run: npm run make
    
    - name: Find artifacts
      id: find_artifacts
      run: |
        # List all artifacts to debug
        find ./out -type f -name "*.dmg" -o -name "*.zip"
        
        # Find DMG artifact
        DMG_PATH=$(find ./out/make -name "*.dmg" | head -n 1)
        echo "DMG artifact found at: $DMG_PATH"
        echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
        
        # Find ZIP artifact
        ZIP_PATH=$(find ./out/make -name "*.zip" | head -n 1)
        echo "ZIP artifact found at: $ZIP_PATH"
        echo "zip_path=$ZIP_PATH" >> $GITHUB_OUTPUT
        
        # Extract filenames for asset names
        DMG_FILENAME=$(basename "$DMG_PATH")
        ZIP_FILENAME=$(basename "$ZIP_PATH")
        echo "dmg_filename=$DMG_FILENAME" >> $GITHUB_OUTPUT
        echo "zip_filename=$ZIP_FILENAME" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        draft: false
        prerelease: false
    
    - name: Upload DMG Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_artifacts.outputs.dmg_path }}
        asset_name: oioio-desktop-${{ steps.version.outputs.new_version }}.dmg
        asset_content_type: application/octet-stream
    
    - name: Upload ZIP Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_artifacts.outputs.zip_path }}
        asset_name: oioio-desktop-${{ steps.version.outputs.new_version }}.zip
        asset_content_type: application/zip