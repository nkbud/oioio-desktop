name: Build and Release

# This workflow builds macOS artifacts (.dmg and .zip) when manually triggered
# Version numbers must be provided manually when triggering the workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_DEVELOPER_IDENTITY: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
      CI: true

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: npm

    - name: Install dependencies
      run: npm ci
    
    # Set up Apple certificates for code signing
    - name: Import Apple Developer Certificate
      if: env.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 && env.APPLE_DEVELOPER_CERTIFICATE_PASSWORD
      run: |
        # Create a temporary directory for the certificate
        mkdir -p $RUNNER_TEMP/certificates
        
        # Decode the base64 certificate and save it to a file
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" | base64 --decode > $RUNNER_TEMP/certificates/certificate.p12
        
        # Import the certificate to the keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security import $RUNNER_TEMP/certificates/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
        # Clean up
        rm -rf $RUNNER_TEMP/certificates
    
    - name: Update package.json version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        npm version $VERSION --no-git-tag-version
    
    - name: Build the app
      run: npm run make
    
    - name: Find artifacts
      id: find_artifacts
      run: |
        # List all artifacts to debug
        find ./out -type f -name "*.dmg" -o -name "*.zip"
        
        # Find DMG artifact
        DMG_PATH=$(find ./out/make -name "*.dmg" | head -n 1)
        echo "DMG artifact found at: $DMG_PATH"
        echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
        
        # Find ZIP artifact
        ZIP_PATH=$(find ./out/make -name "*.zip" | head -n 1)
        echo "ZIP artifact found at: $ZIP_PATH"
        echo "zip_path=$ZIP_PATH" >> $GITHUB_OUTPUT
        
        # Extract filenames for asset names
        DMG_FILENAME=$(basename "$DMG_PATH")
        ZIP_FILENAME=$(basename "$ZIP_PATH")
        echo "dmg_filename=$DMG_FILENAME" >> $GITHUB_OUTPUT
        echo "zip_filename=$ZIP_FILENAME" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        draft: false
        prerelease: false
    
    - name: Upload DMG Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_artifacts.outputs.dmg_path }}
        asset_name: oioio-desktop-${{ github.event.inputs.version }}.dmg
        asset_content_type: application/octet-stream
    
    - name: Upload ZIP Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_artifacts.outputs.zip_path }}
        asset_name: oioio-desktop-${{ github.event.inputs.version }}.zip
        asset_content_type: application/zip